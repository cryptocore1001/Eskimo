// SPDX-License-Identifier: ice License 1.0

// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "ice.io",
            "url": "https://ice.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/getConfirmationStatus": {
            "post": {
                "description": "Status of the auth process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.StatusArg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Auth"
                        }
                    },
                    "403": {
                        "description": "if invalid or expired login session provided",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if login session not found or confirmation code verifying failed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/getMetadata": {
            "post": {
                "description": "Fetches user's metadata based on token's data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Metadata"
                        }
                    },
                    "404": {
                        "description": "if user do not have a metadata yet",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/getValidUserForPhoneNumberMigration": {
            "post": {
                "description": "Returns minimal user information based on provided phone number, in the context of migrating a phone number only account to an email one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "the phone number to identify the account based on",
                        "name": "phoneNumber",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the email to be linked to the account",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.User"
                        }
                    },
                    "400": {
                        "description": "code:INVALID_EMAIL if email is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "code:ACCOUNT_LOST if account lost",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "code:USER_NOT_FOUND if user not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "code:EMAIL_ALREADY_SET if email already set;code:EMAIL_USED_BY_SOMEBODY_ELSE if email use",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/processFaceRecognitionResult": {
            "post": {
                "description": "Webhook to notify the service about the result of an user's face authentication process.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd api key here\u003e",
                        "description": "Insert your api key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "",
                        "description": "UserID to process",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ProcessFaceRecognitionResultArg"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "if not authenticated",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "if not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if user not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refreshTokens": {
            "post": {
                "description": "Issues new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Body containing customClaims",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.RefreshedToken"
                        }
                    },
                    "400": {
                        "description": "if users data from token does not match data in db",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "if invalid or expired refresh token provided",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if user or confirmation not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sendSignInLinkToEmail": {
            "post": {
                "description": "Starts email link auth process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SendSignInLinkToEmailRequestArg"
                        }
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd api key here\u003e",
                        "description": "Insert your api key",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "",
                        "description": "UserID to process phone number migration for",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "1.1.1.1",
                        "description": "Client IP",
                        "name": "X-Forwarded-For",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Auth"
                        }
                    },
                    "403": {
                        "description": "if too many pending auth requests from one IP",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "if email conflicts with another user's",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signInWithEmailLink": {
            "post": {
                "description": "Finishes login flow using magic link",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.MagicLinkPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "if invalid or expired payload provided",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if email does not need to be confirmed by magic link",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/kyc/checkKYCStep4Status/users/{userId}": {
            "post": {
                "description": "Checks the status of the quiz kyc step (4).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KYC"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quiz.QuizStatus"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed due to various reasons",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/kyc/startOrContinueKYCStep4Session/users/{userId}": {
            "post": {
                "description": "Starts or continues the kyc 4 session (Quiz), if available and if not already finished successfully.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KYC"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "language of the user",
                        "name": "language",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "index of the options array. Set it to 222 for the first call.",
                        "name": "selectedOption",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "previous question number. Set it to 222 for the first call.",
                        "name": "questionNumber",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quiz.Quiz"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed due to various reasons",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "if any conflicts occur or any prerequisites are not met",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/kyc/tryResetKYCSteps/users/{userId}": {
            "post": {
                "description": "Checks if there are any kyc steps that should be reset, if so, it resets them and returns the updated latest user state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KYC"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "the kyc steps you wish to skip",
                        "name": "skipKYCSteps",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.User"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed due to various reasons",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/kyc/verifySocialKYCStep/users/{userId}": {
            "post": {
                "description": "Verifies if the user has posted the expected verification post on their social media account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KYC"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "language of the user",
                        "name": "language",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            3,
                            5
                        ],
                        "type": "integer",
                        "description": "the value of the social kyc step to verify",
                        "name": "kycStep",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "facebook",
                            "twitter"
                        ],
                        "type": "string",
                        "description": "the desired social you wish to verify it with",
                        "name": "social",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/social.VerificationMetadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/social.Verification"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/social.Verification"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed due to various reasons",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "if any conflicts occur or any prerequisites are not met",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates an user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "1.1.1.1",
                        "description": "Client IP",
                        "name": "X-Forwarded-For",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserRequestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/main.User"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if no such referred by",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "user already exists with that ID, email or phone number",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "delete": {
                "description": "Deletes an user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the User",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - found and deleted"
                    },
                    "204": {
                        "description": "No Content - already deleted"
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Modifies an user account",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2` + "`" + `.",
                        "name": "agendaPhoneNumberHashes",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `some hash` + "`" + `.",
                        "name": "blockchainAccountAddress",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `1232412415326543647657` + "`" + `.",
                        "name": "checksum",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `New York` + "`" + `.",
                        "name": "city",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "name": "clearHiddenProfileElements",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "name": "clearMiningBlockchainAccountAddress",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example: ` + "`" + `{\"key1\":{\"something\":\"somethingElse\"},\"key2\":\"value\"}` + "`" + `.",
                        "name": "clientData",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `US` + "`" + `.",
                        "name": "country",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `jdoe@gmail.com` + "`" + `.",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `John` + "`" + `.",
                        "name": "firstName",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "globalRank",
                                "referralCount",
                                "level",
                                "role",
                                "badges"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Optional. Example: Array of [` + "`" + `globalRank` + "`" + `,` + "`" + `referralCount` + "`" + `,` + "`" + `level` + "`" + `,` + "`" + `role` + "`" + `,` + "`" + `badges` + "`" + `].",
                        "name": "hiddenProfileElements",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `en` + "`" + `.",
                        "name": "language",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `Doe` + "`" + `.",
                        "name": "lastName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "name": "miningBlockchainAccountAddress",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `+12099216581` + "`" + `.",
                        "name": "phoneNumber",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Required only if ` + "`" + `phoneNumber` + "`" + ` is set. Example:` + "`" + `Ef86A6021afCDe5673511376B2` + "`" + `.",
                        "name": "phoneNumberHash",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2` + "`" + `.",
                        "name": "referredBy",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Optional. Example:` + "`" + `true` + "`" + `.",
                        "name": "resetProfilePicture",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Optional. Example:` + "`" + `jdoe` + "`" + `.",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "The new profile picture for the user",
                        "name": "profilePicture",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.ModifyUserResponse"
                        }
                    },
                    "400": {
                        "description": "if validations fail or user for modification email is blocked",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "user is not found; or the referred by is not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "if username, email or phoneNumber conflict with another user's",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}/devices/{deviceUniqueId}/metadata": {
            "put": {
                "description": "Replaces existing device metadata with the provided one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "1.1.1.1",
                        "description": "Client IP",
                        "name": "X-Forwarded-For",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the device",
                        "name": "deviceUniqueId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ReplaceDeviceMetadataRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "if not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "if user not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}/devices/{deviceUniqueId}/metadata/location": {
            "put": {
                "description": "Returns the device's geolocation based on its IP or based on account information if userId is also provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token. Required only if userId is set",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "1.1.1.1",
                        "description": "Client IP",
                        "name": "X-Forwarded-For",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "default": "\u003cAdd metadata token here\u003e",
                        "description": "Insert your metadata token",
                        "name": "X-Account-Metadata",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "ID of the user. Is optional, set an ` + "`" + `-` + "`" + ` if none.",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the device. Is optional, set an ` + "`" + `-` + "`" + ` if none.",
                        "name": "deviceUniqueId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.DeviceLocation"
                        }
                    },
                    "400": {
                        "description": "if validations fail",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "if not authenticated",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "if not allowed",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "if syntax fails",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "if request times out",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Auth": {
            "type": "object",
            "properties": {
                "loginSession": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                }
            }
        },
        "main.CreateUserRequestBody": {
            "type": "object",
            "properties": {
                "clientData": {
                    "description": "Optional. Example: ` + "`" + `{\"key1\":{\"something\":\"somethingElse\"},\"key2\":\"value\"}` + "`" + `.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.JSON"
                        }
                    ]
                },
                "email": {
                    "description": "Optional.",
                    "type": "string",
                    "example": "jdoe@gmail.com"
                },
                "firstName": {
                    "description": "Optional.",
                    "type": "string",
                    "example": "John"
                },
                "language": {
                    "description": "Optional. Defaults to ` + "`" + `en` + "`" + `.",
                    "type": "string",
                    "example": "en"
                },
                "lastName": {
                    "description": "Optional.",
                    "type": "string",
                    "example": "Doe"
                },
                "phoneNumber": {
                    "description": "Optional.",
                    "type": "string",
                    "example": "+12099216581"
                },
                "phoneNumberHash": {
                    "description": "Optional. Required only if ` + "`" + `phoneNumber` + "`" + ` is set.",
                    "type": "string",
                    "example": "Ef86A6021afCDe5673511376B2"
                },
                "referredBy": {
                    "description": "Optional.",
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                }
            }
        },
        "main.MagicLinkPayload": {
            "type": "object",
            "properties": {
                "confirmationCode": {
                    "type": "string",
                    "example": "999"
                },
                "emailToken": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                }
            }
        },
        "main.Metadata": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "string"
                },
                "userId": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                }
            }
        },
        "main.ModifyUserResponse": {
            "type": "object",
            "properties": {
                "agendaPhoneNumberHashes": {
                    "type": "string",
                    "example": "Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2"
                },
                "blockchainAccountAddress": {
                    "type": "string",
                    "example": "0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "checksum": {
                    "type": "string",
                    "example": "1232412415326543647657"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "clientData": {
                    "$ref": "#/definitions/users.JSON"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-01-03T16:20:52.156534Z"
                },
                "email": {
                    "type": "string",
                    "example": "jdoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "hiddenProfileElements": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "globalRank",
                            "referralCount",
                            "level",
                            "role",
                            "badges"
                        ]
                    },
                    "example": [
                        "level"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "kycQuizAvailabilityEndedAt": {
                    "type": "string"
                },
                "kycQuizCompleted": {
                    "type": "boolean"
                },
                "kycQuizDisabled": {
                    "type": "boolean"
                },
                "kycQuizRemainingAttempts": {
                    "type": "integer"
                },
                "kycQuizResetAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kycStepBlocked": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.KYCStep"
                        }
                    ],
                    "example": 0
                },
                "kycStepPassed": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.KYCStep"
                        }
                    ],
                    "example": 0
                },
                "kycStepsCreatedAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2022-01-03T16:20:52.156534Z"
                    ]
                },
                "kycStepsLastUpdatedAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2022-01-03T16:20:52.156534Z"
                    ]
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "loginSession": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                },
                "miningBlockchainAccountAddress": {
                    "type": "string",
                    "example": "0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+12099216581"
                },
                "profilePictureUrl": {
                    "type": "string",
                    "example": "https://somecdn.com/p1.jpg"
                },
                "referredBy": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "repeatableKYCSteps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-01-03T16:20:52.156534Z"
                },
                "username": {
                    "type": "string",
                    "example": "jdoe"
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "main.ProcessFaceRecognitionResultArg": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "lastUpdatedAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2006-01-02T15:04:05Z"
                    ]
                },
                "potentiallyDuplicate": {
                    "type": "boolean"
                }
            }
        },
        "main.RefreshToken": {
            "type": "object"
        },
        "main.RefreshedToken": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                }
            }
        },
        "main.ReplaceDeviceMetadataRequestBody": {
            "type": "object",
            "properties": {
                "apiLevel": {
                    "type": "integer"
                },
                "baseOs": {
                    "type": "string"
                },
                "bootloader": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "buildId": {
                    "type": "string"
                },
                "carrier": {
                    "type": "string"
                },
                "codename": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                },
                "deviceUniqueId": {
                    "type": "string",
                    "example": "FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9"
                },
                "emulator": {
                    "type": "boolean"
                },
                "fingerprint": {
                    "type": "string"
                },
                "firstInstallTime": {
                    "type": "integer"
                },
                "hardware": {
                    "type": "string"
                },
                "installerPackageName": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string"
                },
                "lastUpdateTime": {
                    "type": "integer"
                },
                "manufacturer": {
                    "type": "string"
                },
                "pinOrFingerprintSet": {
                    "type": "boolean"
                },
                "product": {
                    "type": "string"
                },
                "pushNotificationToken": {
                    "type": "string"
                },
                "readableVersion": {
                    "type": "string"
                },
                "systemName": {
                    "type": "string"
                },
                "systemVersion": {
                    "type": "string"
                },
                "tablet": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "tz": {
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Read Only.",
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                },
                "userId": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                }
            }
        },
        "main.SendSignInLinkToEmailRequestArg": {
            "type": "object",
            "properties": {
                "deviceUniqueId": {
                    "type": "string",
                    "example": "70063ABB-E69F-4FD2-8B83-90DD372802DA"
                },
                "email": {
                    "type": "string",
                    "example": "jdoe@gmail.com"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                }
            }
        },
        "main.StatusArg": {
            "type": "object",
            "properties": {
                "loginSession": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE2ODQzMjQ0NTYsImV4cCI6MTcxNTg2MDQ1NiwiYXVkIjoiIiwic3ViIjoianJvY2tldEBleGFtcGxlLmNvbSIsIm90cCI6IjUxMzRhMzdkLWIyMWEtNGVhNi1hNzk2LTAxOGIwMjMwMmFhMCJ9.q3xa8Gwg2FVCRHLZqkSedH3aK8XBqykaIy85rRU40nM"
                }
            }
        },
        "main.User": {
            "type": "object",
            "properties": {
                "agendaPhoneNumberHashes": {
                    "type": "string",
                    "example": "Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2,Ef86A6021afCDe5673511376B2"
                },
                "blockchainAccountAddress": {
                    "type": "string",
                    "example": "0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "checksum": {
                    "type": "string",
                    "example": "1232412415326543647657"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "clientData": {
                    "$ref": "#/definitions/users.JSON"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-01-03T16:20:52.156534Z"
                },
                "email": {
                    "type": "string",
                    "example": "jdoe@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "hiddenProfileElements": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "globalRank",
                            "referralCount",
                            "level",
                            "role",
                            "badges"
                        ]
                    },
                    "example": [
                        "level"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "kycQuizAvailabilityEndedAt": {
                    "type": "string"
                },
                "kycQuizCompleted": {
                    "type": "boolean"
                },
                "kycQuizDisabled": {
                    "type": "boolean"
                },
                "kycQuizRemainingAttempts": {
                    "type": "integer"
                },
                "kycQuizResetAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kycStepBlocked": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.KYCStep"
                        }
                    ],
                    "example": 0
                },
                "kycStepPassed": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.KYCStep"
                        }
                    ],
                    "example": 0
                },
                "kycStepsCreatedAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2022-01-03T16:20:52.156534Z"
                    ]
                },
                "kycStepsLastUpdatedAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2022-01-03T16:20:52.156534Z"
                    ]
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "miningBlockchainAccountAddress": {
                    "type": "string",
                    "example": "0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "phoneNumber": {
                    "type": "string",
                    "example": "+12099216581"
                },
                "profilePictureUrl": {
                    "type": "string",
                    "example": "https://somecdn.com/p1.jpg"
                },
                "referredBy": {
                    "type": "string",
                    "example": "did:ethr:0x4B73C58370AEfcEf86A6021afCDe5673511376B2"
                },
                "repeatableKYCSteps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-01-03T16:20:52.156534Z"
                },
                "username": {
                    "type": "string",
                    "example": "jdoe"
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "quiz.Progress": {
            "type": "object",
            "properties": {
                "correctAnswers": {
                    "type": "integer",
                    "example": 16
                },
                "expiresAt": {
                    "type": "string",
                    "example": "2022-01-03T16:20:52.156534Z"
                },
                "incorrectAnswers": {
                    "type": "integer",
                    "example": 2
                },
                "maxQuestions": {
                    "type": "integer",
                    "example": 21
                },
                "nextQuestion": {
                    "$ref": "#/definitions/quiz.Question"
                }
            }
        },
        "quiz.Question": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "integer",
                    "example": 1
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "+21",
                        "-2",
                        "+33",
                        "0"
                    ]
                },
                "text": {
                    "type": "string",
                    "example": "Какая температура на улице?"
                }
            }
        },
        "quiz.Quiz": {
            "type": "object",
            "properties": {
                "progress": {
                    "$ref": "#/definitions/quiz.Progress"
                },
                "result": {
                    "$ref": "#/definitions/quiz.Result"
                }
            }
        },
        "quiz.QuizStatus": {
            "type": "object",
            "properties": {
                "kycQuizAvailabilityEndedAt": {
                    "type": "string"
                },
                "kycQuizCompleted": {
                    "type": "boolean"
                },
                "kycQuizDisabled": {
                    "type": "boolean"
                },
                "kycQuizRemainingAttempts": {
                    "type": "integer"
                },
                "kycQuizResetAt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "quiz.Result": {
            "type": "string",
            "enum": [
                "SUCCESS",
                "FAILURE"
            ],
            "x-enum-varnames": [
                "SuccessResult",
                "FailureResult"
            ]
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "SOMETHING_NOT_FOUND"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "error": {
                    "type": "string",
                    "example": "something is missing"
                }
            }
        },
        "social.Facebook": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "some token to access the 3rd party social API on behalf of the user"
                }
            }
        },
        "social.Twitter": {
            "type": "object",
            "properties": {
                "tweetUrl": {
                    "type": "string",
                    "example": "https://twitter.com/elonmusk/status/1716230049408434540"
                }
            }
        },
        "social.Verification": {
            "type": "object",
            "properties": {
                "expectedPostText": {
                    "type": "string",
                    "example": "This is a verification post!"
                },
                "remainingAttempts": {
                    "type": "integer",
                    "example": 3
                },
                "result": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/social.VerificationResult"
                        }
                    ],
                    "example": "false"
                }
            }
        },
        "social.VerificationMetadata": {
            "type": "object",
            "properties": {
                "facebook": {
                    "$ref": "#/definitions/social.Facebook"
                },
                "twitter": {
                    "$ref": "#/definitions/social.Twitter"
                }
            }
        },
        "social.VerificationResult": {
            "type": "string",
            "enum": [
                "SUCCESS",
                "FAILURE"
            ],
            "x-enum-varnames": [
                "SuccessVerificationResult",
                "FailureVerificationResult"
            ]
        },
        "users.DeviceLocation": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                }
            }
        },
        "users.JSON": {
            "type": "object",
            "additionalProperties": {}
        },
        "users.KYCStep": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "x-enum-varnames": [
                "NoneKYCStep",
                "FacialRecognitionKYCStep",
                "LivenessDetectionKYCStep",
                "Social1KYCStep",
                "QuizKYCStep",
                "Social2KYCStep",
                "Social3KYCStep",
                "Social4KYCStep",
                "Social5KYCStep",
                "Social6KYCStep",
                "Social7KYCStep"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "latest",
	Host:             "",
	BasePath:         "/v1w",
	Schemes:          []string{"https"},
	Title:            "User Accounts, User Devices, User Statistics API",
	Description:      "API that handles everything related to write only operations for user's account, user's devices and statistics about those.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
